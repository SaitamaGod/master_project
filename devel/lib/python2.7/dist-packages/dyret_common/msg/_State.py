# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dyret_common/State.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dyret_common.msg
import std_msgs.msg

class State(genpy.Message):
  _md5sum = "199e494597c0c7034abea6bdf1e7efee"
  _type = "dyret_common/State"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message is intended as the output of Dyret

# Header for general bookkeeping
std_msgs/Header header

# State of revolute joints
dyret_common/RevoluteState[12] revolute
# State of prismatic joints
dyret_common/PrismaticState[8] prismatic

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: dyret_common/RevoluteState
# This message represents the state of a single revolute joint
# it is not meant to be used alone, but as a part of other
# messages, see 'State'.

# Joint state
float32 position
float32 velocity
float32 current

# Physical state
float32 voltage
float32 temperature

# Controller state
float32 set_point
float32 error

# Joint status:
uint8 status

uint8 STATUS_NOERROR       = 0
uint8 STATUS_INSTRUCTION   = 1
uint8 STATUS_OVERLOAD      = 2
uint8 STATUS_CHECKSUM      = 3
uint8 STATUS_RANGE         = 4
uint8 STATUS_OVERHEATING   = 5
uint8 STATUS_ANGLE_LIMIT   = 6
uint8 STATUS_INPUT_VOLTAGE = 7

================================================================================
MSG: dyret_common/PrismaticState
# This message represents the state of a single prismatic joint
# it is not meant to be used alone, but as a part of other
# messages, see 'State'.

# Joint state
float32 position

# Controller state
float32 set_point
float32 error
"""
  __slots__ = ['header','revolute','prismatic']
  _slot_types = ['std_msgs/Header','dyret_common/RevoluteState[12]','dyret_common/PrismaticState[8]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,revolute,prismatic

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.revolute is None:
        self.revolute = [dyret_common.msg.RevoluteState() for _ in range(12)]
      if self.prismatic is None:
        self.prismatic = [dyret_common.msg.PrismaticState() for _ in range(8)]
    else:
      self.header = std_msgs.msg.Header()
      self.revolute = [dyret_common.msg.RevoluteState() for _ in range(12)]
      self.prismatic = [dyret_common.msg.PrismaticState() for _ in range(8)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      if len(self.revolute) != 12:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (12, len(self.revolute), 'self.revolute')))
      for val1 in self.revolute:
        _x = val1
        buff.write(_get_struct_7fB().pack(_x.position, _x.velocity, _x.current, _x.voltage, _x.temperature, _x.set_point, _x.error, _x.status))
      if len(self.prismatic) != 8:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (8, len(self.prismatic), 'self.prismatic')))
      for val1 in self.prismatic:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.position, _x.set_point, _x.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.revolute is None:
        self.revolute = None
      if self.prismatic is None:
        self.prismatic = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      self.revolute = []
      for i in range(0, 12):
        val1 = dyret_common.msg.RevoluteState()
        _x = val1
        start = end
        end += 29
        (_x.position, _x.velocity, _x.current, _x.voltage, _x.temperature, _x.set_point, _x.error, _x.status,) = _get_struct_7fB().unpack(str[start:end])
        self.revolute.append(val1)
      self.prismatic = []
      for i in range(0, 8):
        val1 = dyret_common.msg.PrismaticState()
        _x = val1
        start = end
        end += 12
        (_x.position, _x.set_point, _x.error,) = _get_struct_3f().unpack(str[start:end])
        self.prismatic.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      if len(self.revolute) != 12:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (12, len(self.revolute), 'self.revolute')))
      for val1 in self.revolute:
        _x = val1
        buff.write(_get_struct_7fB().pack(_x.position, _x.velocity, _x.current, _x.voltage, _x.temperature, _x.set_point, _x.error, _x.status))
      if len(self.prismatic) != 8:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (8, len(self.prismatic), 'self.prismatic')))
      for val1 in self.prismatic:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.position, _x.set_point, _x.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.revolute is None:
        self.revolute = None
      if self.prismatic is None:
        self.prismatic = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      self.revolute = []
      for i in range(0, 12):
        val1 = dyret_common.msg.RevoluteState()
        _x = val1
        start = end
        end += 29
        (_x.position, _x.velocity, _x.current, _x.voltage, _x.temperature, _x.set_point, _x.error, _x.status,) = _get_struct_7fB().unpack(str[start:end])
        self.revolute.append(val1)
      self.prismatic = []
      for i in range(0, 8):
        val1 = dyret_common.msg.PrismaticState()
        _x = val1
        start = end
        end += 12
        (_x.position, _x.set_point, _x.error,) = _get_struct_3f().unpack(str[start:end])
        self.prismatic.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7fB = None
def _get_struct_7fB():
    global _struct_7fB
    if _struct_7fB is None:
        _struct_7fB = struct.Struct("<7fB")
    return _struct_7fB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
