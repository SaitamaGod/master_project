# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dyret_common/RevoluteState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RevoluteState(genpy.Message):
  _md5sum = "8a0202d7c351899cbb1b8a94d488c4ce"
  _type = "dyret_common/RevoluteState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message represents the state of a single revolute joint
# it is not meant to be used alone, but as a part of other
# messages, see 'State'.

# Joint state
float32 position
float32 velocity
float32 current

# Physical state
float32 voltage
float32 temperature

# Controller state
float32 set_point
float32 error

# Joint status:
uint8 status

uint8 STATUS_NOERROR       = 0
uint8 STATUS_INSTRUCTION   = 1
uint8 STATUS_OVERLOAD      = 2
uint8 STATUS_CHECKSUM      = 3
uint8 STATUS_RANGE         = 4
uint8 STATUS_OVERHEATING   = 5
uint8 STATUS_ANGLE_LIMIT   = 6
uint8 STATUS_INPUT_VOLTAGE = 7
"""
  # Pseudo-constants
  STATUS_NOERROR = 0
  STATUS_INSTRUCTION = 1
  STATUS_OVERLOAD = 2
  STATUS_CHECKSUM = 3
  STATUS_RANGE = 4
  STATUS_OVERHEATING = 5
  STATUS_ANGLE_LIMIT = 6
  STATUS_INPUT_VOLTAGE = 7

  __slots__ = ['position','velocity','current','voltage','temperature','set_point','error','status']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,velocity,current,voltage,temperature,set_point,error,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RevoluteState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.current is None:
        self.current = 0.
      if self.voltage is None:
        self.voltage = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.set_point is None:
        self.set_point = 0.
      if self.error is None:
        self.error = 0.
      if self.status is None:
        self.status = 0
    else:
      self.position = 0.
      self.velocity = 0.
      self.current = 0.
      self.voltage = 0.
      self.temperature = 0.
      self.set_point = 0.
      self.error = 0.
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7fB().pack(_x.position, _x.velocity, _x.current, _x.voltage, _x.temperature, _x.set_point, _x.error, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.position, _x.velocity, _x.current, _x.voltage, _x.temperature, _x.set_point, _x.error, _x.status,) = _get_struct_7fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7fB().pack(_x.position, _x.velocity, _x.current, _x.voltage, _x.temperature, _x.set_point, _x.error, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.position, _x.velocity, _x.current, _x.voltage, _x.temperature, _x.set_point, _x.error, _x.status,) = _get_struct_7fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7fB = None
def _get_struct_7fB():
    global _struct_7fB
    if _struct_7fB is None:
        _struct_7fB = struct.Struct("<7fB")
    return _struct_7fB
