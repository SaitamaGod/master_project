// Generated by gencpp from file dyret_hardware/ActuatorBoardCommand.msg
// DO NOT EDIT!


#ifndef DYRET_HARDWARE_MESSAGE_ACTUATORBOARDCOMMAND_H
#define DYRET_HARDWARE_MESSAGE_ACTUATORBOARDCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dyret_hardware
{
template <class ContainerAllocator>
struct ActuatorBoardCommand_
{
  typedef ActuatorBoardCommand_<ContainerAllocator> Type;

  ActuatorBoardCommand_()
    : length()  {
    }
  ActuatorBoardCommand_(const ContainerAllocator& _alloc)
    : length(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _length_type;
  _length_type length;





  typedef boost::shared_ptr< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ActuatorBoardCommand_

typedef ::dyret_hardware::ActuatorBoardCommand_<std::allocator<void> > ActuatorBoardCommand;

typedef boost::shared_ptr< ::dyret_hardware::ActuatorBoardCommand > ActuatorBoardCommandPtr;
typedef boost::shared_ptr< ::dyret_hardware::ActuatorBoardCommand const> ActuatorBoardCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator1> & lhs, const ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator2> & rhs)
{
  return lhs.length == rhs.length;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator1> & lhs, const ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dyret_hardware

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d38d684f1da83a97953821045e0f85c";
  }

  static const char* value(const ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d38d684f1da83a9ULL;
  static const uint64_t static_value2 = 0x7953821045e0f85cULL;
};

template<class ContainerAllocator>
struct DataType< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dyret_hardware/ActuatorBoardCommand";
  }

  static const char* value(const ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Length either specifies:\n"
"#   One length for all links\n"
"#   Two lengths - the first for all femurs, the second for all tibias\n"
"#   Individual lengths for each actuator\n"
"\n"
"float32[] length\n"
;
  }

  static const char* value(const ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuatorBoardCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dyret_hardware::ActuatorBoardCommand_<ContainerAllocator>& v)
  {
    s << indent << "length[]" << std::endl;
    for (size_t i = 0; i < v.length.size(); ++i)
    {
      s << indent << "  length[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.length[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYRET_HARDWARE_MESSAGE_ACTUATORBOARDCOMMAND_H
