// Generated by gencpp from file dyret_common/Pose.msg
// DO NOT EDIT!


#ifndef DYRET_COMMON_MESSAGE_POSE_H
#define DYRET_COMMON_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace dyret_common
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : header()
    , revolute()
    , prismatic()  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , revolute(_alloc)
    , prismatic(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _revolute_type;
  _revolute_type revolute;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _prismatic_type;
  _prismatic_type prismatic;





  typedef boost::shared_ptr< ::dyret_common::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dyret_common::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::dyret_common::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::dyret_common::Pose > PosePtr;
typedef boost::shared_ptr< ::dyret_common::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dyret_common::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dyret_common::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dyret_common::Pose_<ContainerAllocator1> & lhs, const ::dyret_common::Pose_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.revolute == rhs.revolute &&
    lhs.prismatic == rhs.prismatic;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dyret_common::Pose_<ContainerAllocator1> & lhs, const ::dyret_common::Pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dyret_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dyret_common::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dyret_common::Pose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_common::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_common::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_common::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_common::Pose_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dyret_common::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d38af895dd2ed7501d4d52c672ffa71b";
  }

  static const char* value(const ::dyret_common::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd38af895dd2ed750ULL;
  static const uint64_t static_value2 = 0x1d4d52c672ffa71bULL;
};

template<class ContainerAllocator>
struct DataType< ::dyret_common::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dyret_common/Pose";
  }

  static const char* value(const ::dyret_common::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dyret_common::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Joint pose\n"
"std_msgs/Header header\n"
"# There are 12 revolute joints that have to be\n"
"# specified. Valid messages contains either 0 or 12 revolute angles\n"
"float32[] revolute\n"
"# For prismatic we allow either 0, 2 or 8 values, either\n"
"# specifying all joints or 1 for top extension and one\n"
"# for bottom extension for all legs\n"
"float32[] prismatic\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::dyret_common::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dyret_common::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.revolute);
      stream.next(m.prismatic);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dyret_common::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dyret_common::Pose_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "revolute[]" << std::endl;
    for (size_t i = 0; i < v.revolute.size(); ++i)
    {
      s << indent << "  revolute[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.revolute[i]);
    }
    s << indent << "prismatic[]" << std::endl;
    for (size_t i = 0; i < v.prismatic.size(); ++i)
    {
      s << indent << "  prismatic[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.prismatic[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYRET_COMMON_MESSAGE_POSE_H
