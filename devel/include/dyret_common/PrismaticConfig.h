// Generated by gencpp from file dyret_common/PrismaticConfig.msg
// DO NOT EDIT!


#ifndef DYRET_COMMON_MESSAGE_PRISMATICCONFIG_H
#define DYRET_COMMON_MESSAGE_PRISMATICCONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dyret_common
{
template <class ContainerAllocator>
struct PrismaticConfig_
{
  typedef PrismaticConfig_<ContainerAllocator> Type;

  PrismaticConfig_()
    : ids()
    , parameters()
    , type(0)  {
    }
  PrismaticConfig_(const ContainerAllocator& _alloc)
    : ids(_alloc)
    , parameters(_alloc)
    , type(0)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _ids_type;
  _ids_type ids;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _parameters_type;
  _parameters_type parameters;

   typedef uint8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_SET_PID)
  #undef TYPE_SET_PID
#endif

  enum {
    TYPE_SET_PID = 1u,
  };


  typedef boost::shared_ptr< ::dyret_common::PrismaticConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dyret_common::PrismaticConfig_<ContainerAllocator> const> ConstPtr;

}; // struct PrismaticConfig_

typedef ::dyret_common::PrismaticConfig_<std::allocator<void> > PrismaticConfig;

typedef boost::shared_ptr< ::dyret_common::PrismaticConfig > PrismaticConfigPtr;
typedef boost::shared_ptr< ::dyret_common::PrismaticConfig const> PrismaticConfigConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dyret_common::PrismaticConfig_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dyret_common::PrismaticConfig_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dyret_common::PrismaticConfig_<ContainerAllocator1> & lhs, const ::dyret_common::PrismaticConfig_<ContainerAllocator2> & rhs)
{
  return lhs.ids == rhs.ids &&
    lhs.parameters == rhs.parameters &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dyret_common::PrismaticConfig_<ContainerAllocator1> & lhs, const ::dyret_common::PrismaticConfig_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dyret_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dyret_common::PrismaticConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dyret_common::PrismaticConfig_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_common::PrismaticConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_common::PrismaticConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_common::PrismaticConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_common::PrismaticConfig_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dyret_common::PrismaticConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f37ca691727ac5015b55556007febdb";
  }

  static const char* value(const ::dyret_common::PrismaticConfig_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f37ca691727ac50ULL;
  static const uint64_t static_value2 = 0x15b55556007febdbULL;
};

template<class ContainerAllocator>
struct DataType< ::dyret_common::PrismaticConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dyret_common/PrismaticConfig";
  }

  static const char* value(const ::dyret_common::PrismaticConfig_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dyret_common::PrismaticConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message represents the configuration of the prismatic joints\n"
"#\n"
"# - The configuration is applied to all joints if the id array is empty.\n"
"# - All parameters are added sequentially in the parameter field, so\n"
"# the length of this array may be a multiple of the number of joints in\n"
"# cases where there are more than one parameter per joint needed\n"
"\n"
"# Joint IDs\n"
"uint8[] ids\n"
"\n"
"# Configuration parameters\n"
"float64[] parameters\n"
"\n"
"# Configuration type\n"
"uint8 type\n"
"\n"
"uint8 TYPE_SET_PID = 1\n"
;
  }

  static const char* value(const ::dyret_common::PrismaticConfig_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dyret_common::PrismaticConfig_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ids);
      stream.next(m.parameters);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PrismaticConfig_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dyret_common::PrismaticConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dyret_common::PrismaticConfig_<ContainerAllocator>& v)
  {
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.ids[i]);
    }
    s << indent << "parameters[]" << std::endl;
    for (size_t i = 0; i < v.parameters.size(); ++i)
    {
      s << indent << "  parameters[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.parameters[i]);
    }
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYRET_COMMON_MESSAGE_PRISMATICCONFIG_H
