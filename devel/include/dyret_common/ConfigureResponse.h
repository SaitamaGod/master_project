// Generated by gencpp from file dyret_common/ConfigureResponse.msg
// DO NOT EDIT!


#ifndef DYRET_COMMON_MESSAGE_CONFIGURERESPONSE_H
#define DYRET_COMMON_MESSAGE_CONFIGURERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dyret_common
{
template <class ContainerAllocator>
struct ConfigureResponse_
{
  typedef ConfigureResponse_<ContainerAllocator> Type;

  ConfigureResponse_()
    : status(0)
    , message()  {
    }
  ConfigureResponse_(const ContainerAllocator& _alloc)
    : status(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATUS_NOERROR)
  #undef STATUS_NOERROR
#endif
#if defined(_WIN32) && defined(STATUS_PARAMETER)
  #undef STATUS_PARAMETER
#endif
#if defined(_WIN32) && defined(STATUS_STATE)
  #undef STATUS_STATE
#endif

  enum {
    STATUS_NOERROR = 0u,
    STATUS_PARAMETER = 1u,
    STATUS_STATE = 2u,
  };


  typedef boost::shared_ptr< ::dyret_common::ConfigureResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dyret_common::ConfigureResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigureResponse_

typedef ::dyret_common::ConfigureResponse_<std::allocator<void> > ConfigureResponse;

typedef boost::shared_ptr< ::dyret_common::ConfigureResponse > ConfigureResponsePtr;
typedef boost::shared_ptr< ::dyret_common::ConfigureResponse const> ConfigureResponseConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dyret_common::ConfigureResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dyret_common::ConfigureResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dyret_common::ConfigureResponse_<ContainerAllocator1> & lhs, const ::dyret_common::ConfigureResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dyret_common::ConfigureResponse_<ContainerAllocator1> & lhs, const ::dyret_common::ConfigureResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dyret_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dyret_common::ConfigureResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dyret_common::ConfigureResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_common::ConfigureResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_common::ConfigureResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_common::ConfigureResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_common::ConfigureResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dyret_common::ConfigureResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb34524efe0030dce9b13d3bcb84b398";
  }

  static const char* value(const ::dyret_common::ConfigureResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb34524efe0030dcULL;
  static const uint64_t static_value2 = 0xe9b13d3bcb84b398ULL;
};

template<class ContainerAllocator>
struct DataType< ::dyret_common::ConfigureResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dyret_common/ConfigureResponse";
  }

  static const char* value(const ::dyret_common::ConfigureResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dyret_common::ConfigureResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint8 status\n"
"\n"
"uint8 STATUS_NOERROR   = 0\n"
"\n"
"uint8 STATUS_PARAMETER = 1\n"
"\n"
"uint8 STATUS_STATE     = 2\n"
"\n"
"\n"
"string message\n"
"\n"
;
  }

  static const char* value(const ::dyret_common::ConfigureResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dyret_common::ConfigureResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigureResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dyret_common::ConfigureResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dyret_common::ConfigureResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYRET_COMMON_MESSAGE_CONFIGURERESPONSE_H
