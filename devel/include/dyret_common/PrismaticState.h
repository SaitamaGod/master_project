// Generated by gencpp from file dyret_common/PrismaticState.msg
// DO NOT EDIT!


#ifndef DYRET_COMMON_MESSAGE_PRISMATICSTATE_H
#define DYRET_COMMON_MESSAGE_PRISMATICSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dyret_common
{
template <class ContainerAllocator>
struct PrismaticState_
{
  typedef PrismaticState_<ContainerAllocator> Type;

  PrismaticState_()
    : position(0.0)
    , set_point(0.0)
    , error(0.0)  {
    }
  PrismaticState_(const ContainerAllocator& _alloc)
    : position(0.0)
    , set_point(0.0)
    , error(0.0)  {
  (void)_alloc;
    }



   typedef float _position_type;
  _position_type position;

   typedef float _set_point_type;
  _set_point_type set_point;

   typedef float _error_type;
  _error_type error;





  typedef boost::shared_ptr< ::dyret_common::PrismaticState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dyret_common::PrismaticState_<ContainerAllocator> const> ConstPtr;

}; // struct PrismaticState_

typedef ::dyret_common::PrismaticState_<std::allocator<void> > PrismaticState;

typedef boost::shared_ptr< ::dyret_common::PrismaticState > PrismaticStatePtr;
typedef boost::shared_ptr< ::dyret_common::PrismaticState const> PrismaticStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dyret_common::PrismaticState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dyret_common::PrismaticState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dyret_common::PrismaticState_<ContainerAllocator1> & lhs, const ::dyret_common::PrismaticState_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.set_point == rhs.set_point &&
    lhs.error == rhs.error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dyret_common::PrismaticState_<ContainerAllocator1> & lhs, const ::dyret_common::PrismaticState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dyret_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dyret_common::PrismaticState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dyret_common::PrismaticState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_common::PrismaticState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_common::PrismaticState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_common::PrismaticState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_common::PrismaticState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dyret_common::PrismaticState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e64097716783a477a5eaca8bf59b2072";
  }

  static const char* value(const ::dyret_common::PrismaticState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe64097716783a477ULL;
  static const uint64_t static_value2 = 0xa5eaca8bf59b2072ULL;
};

template<class ContainerAllocator>
struct DataType< ::dyret_common::PrismaticState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dyret_common/PrismaticState";
  }

  static const char* value(const ::dyret_common::PrismaticState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dyret_common::PrismaticState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message represents the state of a single prismatic joint\n"
"# it is not meant to be used alone, but as a part of other\n"
"# messages, see 'State'.\n"
"\n"
"# Joint state\n"
"float32 position\n"
"\n"
"# Controller state\n"
"float32 set_point\n"
"float32 error\n"
;
  }

  static const char* value(const ::dyret_common::PrismaticState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dyret_common::PrismaticState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.set_point);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PrismaticState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dyret_common::PrismaticState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dyret_common::PrismaticState_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "set_point: ";
    Printer<float>::stream(s, indent + "  ", v.set_point);
    s << indent << "error: ";
    Printer<float>::stream(s, indent + "  ", v.error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYRET_COMMON_MESSAGE_PRISMATICSTATE_H
