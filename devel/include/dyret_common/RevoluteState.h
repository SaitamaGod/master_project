// Generated by gencpp from file dyret_common/RevoluteState.msg
// DO NOT EDIT!


#ifndef DYRET_COMMON_MESSAGE_REVOLUTESTATE_H
#define DYRET_COMMON_MESSAGE_REVOLUTESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dyret_common
{
template <class ContainerAllocator>
struct RevoluteState_
{
  typedef RevoluteState_<ContainerAllocator> Type;

  RevoluteState_()
    : position(0.0)
    , velocity(0.0)
    , current(0.0)
    , voltage(0.0)
    , temperature(0.0)
    , set_point(0.0)
    , error(0.0)
    , status(0)  {
    }
  RevoluteState_(const ContainerAllocator& _alloc)
    : position(0.0)
    , velocity(0.0)
    , current(0.0)
    , voltage(0.0)
    , temperature(0.0)
    , set_point(0.0)
    , error(0.0)
    , status(0)  {
  (void)_alloc;
    }



   typedef float _position_type;
  _position_type position;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _current_type;
  _current_type current;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _set_point_type;
  _set_point_type set_point;

   typedef float _error_type;
  _error_type error;

   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATUS_NOERROR)
  #undef STATUS_NOERROR
#endif
#if defined(_WIN32) && defined(STATUS_INSTRUCTION)
  #undef STATUS_INSTRUCTION
#endif
#if defined(_WIN32) && defined(STATUS_OVERLOAD)
  #undef STATUS_OVERLOAD
#endif
#if defined(_WIN32) && defined(STATUS_CHECKSUM)
  #undef STATUS_CHECKSUM
#endif
#if defined(_WIN32) && defined(STATUS_RANGE)
  #undef STATUS_RANGE
#endif
#if defined(_WIN32) && defined(STATUS_OVERHEATING)
  #undef STATUS_OVERHEATING
#endif
#if defined(_WIN32) && defined(STATUS_ANGLE_LIMIT)
  #undef STATUS_ANGLE_LIMIT
#endif
#if defined(_WIN32) && defined(STATUS_INPUT_VOLTAGE)
  #undef STATUS_INPUT_VOLTAGE
#endif

  enum {
    STATUS_NOERROR = 0u,
    STATUS_INSTRUCTION = 1u,
    STATUS_OVERLOAD = 2u,
    STATUS_CHECKSUM = 3u,
    STATUS_RANGE = 4u,
    STATUS_OVERHEATING = 5u,
    STATUS_ANGLE_LIMIT = 6u,
    STATUS_INPUT_VOLTAGE = 7u,
  };


  typedef boost::shared_ptr< ::dyret_common::RevoluteState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dyret_common::RevoluteState_<ContainerAllocator> const> ConstPtr;

}; // struct RevoluteState_

typedef ::dyret_common::RevoluteState_<std::allocator<void> > RevoluteState;

typedef boost::shared_ptr< ::dyret_common::RevoluteState > RevoluteStatePtr;
typedef boost::shared_ptr< ::dyret_common::RevoluteState const> RevoluteStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dyret_common::RevoluteState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dyret_common::RevoluteState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dyret_common::RevoluteState_<ContainerAllocator1> & lhs, const ::dyret_common::RevoluteState_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.current == rhs.current &&
    lhs.voltage == rhs.voltage &&
    lhs.temperature == rhs.temperature &&
    lhs.set_point == rhs.set_point &&
    lhs.error == rhs.error &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dyret_common::RevoluteState_<ContainerAllocator1> & lhs, const ::dyret_common::RevoluteState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dyret_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dyret_common::RevoluteState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dyret_common::RevoluteState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_common::RevoluteState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyret_common::RevoluteState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_common::RevoluteState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyret_common::RevoluteState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dyret_common::RevoluteState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a0202d7c351899cbb1b8a94d488c4ce";
  }

  static const char* value(const ::dyret_common::RevoluteState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a0202d7c351899cULL;
  static const uint64_t static_value2 = 0xbb1b8a94d488c4ceULL;
};

template<class ContainerAllocator>
struct DataType< ::dyret_common::RevoluteState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dyret_common/RevoluteState";
  }

  static const char* value(const ::dyret_common::RevoluteState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dyret_common::RevoluteState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message represents the state of a single revolute joint\n"
"# it is not meant to be used alone, but as a part of other\n"
"# messages, see 'State'.\n"
"\n"
"# Joint state\n"
"float32 position\n"
"float32 velocity\n"
"float32 current\n"
"\n"
"# Physical state\n"
"float32 voltage\n"
"float32 temperature\n"
"\n"
"# Controller state\n"
"float32 set_point\n"
"float32 error\n"
"\n"
"# Joint status:\n"
"uint8 status\n"
"\n"
"uint8 STATUS_NOERROR       = 0\n"
"uint8 STATUS_INSTRUCTION   = 1\n"
"uint8 STATUS_OVERLOAD      = 2\n"
"uint8 STATUS_CHECKSUM      = 3\n"
"uint8 STATUS_RANGE         = 4\n"
"uint8 STATUS_OVERHEATING   = 5\n"
"uint8 STATUS_ANGLE_LIMIT   = 6\n"
"uint8 STATUS_INPUT_VOLTAGE = 7\n"
;
  }

  static const char* value(const ::dyret_common::RevoluteState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dyret_common::RevoluteState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.current);
      stream.next(m.voltage);
      stream.next(m.temperature);
      stream.next(m.set_point);
      stream.next(m.error);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RevoluteState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dyret_common::RevoluteState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dyret_common::RevoluteState_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "set_point: ";
    Printer<float>::stream(s, indent + "  ", v.set_point);
    s << indent << "error: ";
    Printer<float>::stream(s, indent + "  ", v.error);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYRET_COMMON_MESSAGE_REVOLUTESTATE_H
